import { expect, test } from 'vitest'

import { generateShortName } from '../src/shortname-generator'

test('should work with 1 char', () => {
  const shortNameGenerator = generateShortName()

  expect(shortNameGenerator.next().value).toBe('a')
  expect(shortNameGenerator.next().value).toBe('b')
  expect(shortNameGenerator.next().value).toBe('c')
  expect(shortNameGenerator.next().value).toBe('d')
  expect(shortNameGenerator.next().value).toBe('e')
  expect(shortNameGenerator.next().value).toBe('f')
  expect(shortNameGenerator.next().value).toBe('g')
  expect(shortNameGenerator.next().value).toBe('h')
  expect(shortNameGenerator.next().value).toBe('i')
  expect(shortNameGenerator.next().value).toBe('j')
  expect(shortNameGenerator.next().value).toBe('k')
  expect(shortNameGenerator.next().value).toBe('l')
  expect(shortNameGenerator.next().value).toBe('m')
  expect(shortNameGenerator.next().value).toBe('n')
  expect(shortNameGenerator.next().value).toBe('o')
  expect(shortNameGenerator.next().value).toBe('p')
  expect(shortNameGenerator.next().value).toBe('q')
  expect(shortNameGenerator.next().value).toBe('r')
  expect(shortNameGenerator.next().value).toBe('s')
  expect(shortNameGenerator.next().value).toBe('t')
  expect(shortNameGenerator.next().value).toBe('u')
  expect(shortNameGenerator.next().value).toBe('v')
  expect(shortNameGenerator.next().value).toBe('w')
  expect(shortNameGenerator.next().value).toBe('x')
  expect(shortNameGenerator.next().value).toBe('y')
  expect(shortNameGenerator.next().value).toBe('z')
  expect(shortNameGenerator.next().value).toBe('A')
  expect(shortNameGenerator.next().value).toBe('B')
  expect(shortNameGenerator.next().value).toBe('C')
  expect(shortNameGenerator.next().value).toBe('D')
  expect(shortNameGenerator.next().value).toBe('E')
  expect(shortNameGenerator.next().value).toBe('F')
  expect(shortNameGenerator.next().value).toBe('G')
  expect(shortNameGenerator.next().value).toBe('H')
  expect(shortNameGenerator.next().value).toBe('I')
  expect(shortNameGenerator.next().value).toBe('J')
  expect(shortNameGenerator.next().value).toBe('K')
  expect(shortNameGenerator.next().value).toBe('L')
  expect(shortNameGenerator.next().value).toBe('M')
  expect(shortNameGenerator.next().value).toBe('N')
  expect(shortNameGenerator.next().value).toBe('O')
  expect(shortNameGenerator.next().value).toBe('P')
  expect(shortNameGenerator.next().value).toBe('Q')
  expect(shortNameGenerator.next().value).toBe('R')
  expect(shortNameGenerator.next().value).toBe('S')
  expect(shortNameGenerator.next().value).toBe('T')
  expect(shortNameGenerator.next().value).toBe('U')
  expect(shortNameGenerator.next().value).toBe('V')
  expect(shortNameGenerator.next().value).toBe('W')
  expect(shortNameGenerator.next().value).toBe('X')
  expect(shortNameGenerator.next().value).toBe('Y')
  expect(shortNameGenerator.next().value).toBe('Z')
  expect(shortNameGenerator.next().value).toBe('_')
})

test('should work with 2 chars', () => {
  const shortNameGenerator = generateShortName()

  for (let i = 0; i < 53; i++) shortNameGenerator.next()
  expect(shortNameGenerator.next().value).toBe('aa')
  expect(shortNameGenerator.next().value).toBe('ab')
  for (let i = 0; i < 23; i++) shortNameGenerator.next()
  expect(shortNameGenerator.next().value).toBe('az')
  expect(shortNameGenerator.next().value).toBe('aA')
  expect(shortNameGenerator.next().value).toBe('aB')
  for (let i = 0; i < 23; i++) shortNameGenerator.next()
  expect(shortNameGenerator.next().value).toBe('aZ')
  expect(shortNameGenerator.next().value).toBe('a_')
  expect(shortNameGenerator.next().value).toBe('a0')
  expect(shortNameGenerator.next().value).toBe('a1')
  expect(shortNameGenerator.next().value).toBe('a2')
  expect(shortNameGenerator.next().value).toBe('a3')
  expect(shortNameGenerator.next().value).toBe('a4')
  expect(shortNameGenerator.next().value).toBe('a5')
  expect(shortNameGenerator.next().value).toBe('a6')
  expect(shortNameGenerator.next().value).toBe('a7')
  expect(shortNameGenerator.next().value).toBe('a8')
  expect(shortNameGenerator.next().value).toBe('a9')
  expect(shortNameGenerator.next().value).toBe('ba')
})
